{"version":3,"file":"common-lib.mjs","sources":["../../../projects/common-lib/src/lib/common-lib.service.ts","../../../projects/common-lib/src/lib/common-lib.component.ts","../../../projects/common-lib/src/lib/environments/environment.base.ts","../../../projects/common-lib/src/lib/environments/environment.development.ts","../../../projects/common-lib/src/lib/environments/environment.production.ts","../../../projects/common-lib/src/lib/environments/environment.staging.ts","../../../projects/common-lib/src/lib/environments/environment.local.ts","../../../projects/common-lib/src/lib/services/system.service.ts","../../../projects/common-lib/src/lib/services/authentication.service.ts","../../../projects/common-lib/src/lib/services/firestore.service.ts","../../../projects/common-lib/src/lib/services/instance.service.ts","../../../projects/common-lib/src/lib/enums/applications.enum.ts","../../../projects/common-lib/src/lib/database/firestore-repository-base.class.ts","../../../projects/common-lib/src/lib/database/firestore-entity-watcher.class.ts","../../../projects/common-lib/src/lib/database/firestore-app-user-repository.class.ts","../../../projects/common-lib/src/lib/database/firestore-instance-repository.class.ts","../../../projects/common-lib/src/lib/entities/_base-entity.class.ts","../../../projects/common-lib/src/lib/entities/app-user.class.ts","../../../projects/common-lib/src/lib/entities/instance.class.ts","../../../projects/common-lib/src/lib/entities/application.class.ts","../../../projects/common-lib/src/lib/entities/invitation.class.ts","../../../projects/common-lib/src/lib/components/not-found-page/not-found-page.component.ts","../../../projects/common-lib/src/lib/components/not-found-page/not-found-page.component.html","../../../projects/common-lib/src/lib/environments/environment.ts","../../../projects/common-lib/src/lib/components/version/version.component.ts","../../../projects/common-lib/src/lib/components/version/version.component.html","../../../projects/common-lib/src/public-api.ts","../../../projects/common-lib/src/common-lib.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommonLibService {\r\n\r\n  constructor() { }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'lib-common-lib',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <p>\r\n      common-lib works!\r\n    </p>\r\n  `,\r\n  styles: ``\r\n})\r\nexport class CommonLibComponent {\r\n\r\n}\r\n","// WARNING, do not touch the double quote (\") chars used in version, commitHash, and installationDate, as it's used by the CI/CD\r\nexport const envBase = {\r\n  version: \"0.1.0.0\",\r\n  commitHash: \"\",\r\n  packageGenerationDate: \"\",\r\n  stage: '',\r\n  live: false,\r\n  production: false,\r\n\r\n  firebase: {\r\n    projectId: 'demo-time-it',\r\n    host: '127.0.0.1:8080',\r\n    firestoreHost: '127.0.0.1:8080',\r\n    ssl: false,\r\n    apiKey: \"any-string-value\",\r\n    authDomain: 'demo-time-it.any.com',\r\n  }\r\n};\r\n","import { envBase } from \"./environment.base\";\r\n\r\nexport const environmentDevelopment = {\r\n  ...envBase,\r\n  stage: 'dev',\r\n  live: true,\r\n  production: false\r\n};\r\n","import { envBase } from \"./environment.base\";\r\n\r\nexport const environmentProduction = {\r\n  ...envBase,\r\n  stage: 'prod',\r\n  live: true,\r\n  production: true,\r\n  firebase: {\r\n    apiKey: \"AIzaSyDj_7nBw_VjvAmv4ClGbSYICBF26c2CgNM\",\r\n    authDomain: \"time-it-prod.firebaseapp.com\",\r\n    projectId: \"time-it-prod\",\r\n    storageBucket: \"time-it-prod.appspot.com\",\r\n    messagingSenderId: \"876939417541\",\r\n    appId: \"1:876939417541:web:216f796184014f42d3ddac\"\r\n  }\r\n};\r\n","import { envBase } from \"./environment.base\";\r\n\r\nexport const environmentStaging = {\r\n  ...envBase,\r\n\r\n  stage: 'uat',\r\n  live: true,\r\n  production: false,\r\n  firebase: {\r\n    projectId: 'time-it-uat',\r\n    storageBucket: '',\r\n    apiKey: 'AIzaSyBBcvi1dgnMbVUU0nSS5RbztZ24CYAhIho',\r\n    authDomain: 'time-it-uat.firebaseapp.com',\r\n    messagingSenderId: '291494207232'\r\n  }\r\n};\r\n","import { envBase } from \"./environment.base\";\r\n\r\n// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\n\r\n// WARNING, do not touch the double quote (\") chars used in version, commitHash, and installationDate, it used by the CI/CD\r\nexport const environmentLocal = {\r\n  ...envBase,\r\n\r\n  stage: 'local',\r\n  live: false,\r\n  production: false,\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, firstValueFrom, Observable } from \"rxjs\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { environmentDevelopment } from \"../environments/environment.development\";\r\nimport { environmentProduction } from \"../environments/environment.production\";\r\nimport { environmentStaging } from \"../environments/environment.staging\";\r\nimport { environmentLocal } from \"../environments/environment.local\";\r\n\r\ninterface ConfigSystem {\r\n  stage: string;\r\n}\r\n\r\ninterface Configuration {\r\n  stage: string;\r\n  firebase: {}\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SystemService {\r\n\r\n\r\n  public constructor(private http: HttpClient) {\r\n  }\r\n\r\n\r\n  async getEnvironmentConfiguration(): Promise<Configuration> {\r\n    const env = await firstValueFrom(this.http.get<ConfigSystem>('/assets/config.json'));\r\n    const stage = env.stage;\r\n\r\n    switch (stage) {\r\n      case 'dev':\r\n        return environmentDevelopment;\r\n      case 'prod':\r\n        return environmentProduction;\r\n      case 'uat':\r\n        return environmentStaging;\r\n      default:\r\n        return environmentLocal;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { firstValueFrom, ReplaySubject } from \"rxjs\";\r\nimport {\r\n  Auth,\r\n  connectAuthEmulator,\r\n  createUserWithEmailAndPassword,\r\n  getAuth, GoogleAuthProvider,\r\n  onAuthStateChanged,\r\n  signInWithEmailAndPassword, signInWithPopup, signOut,\r\n  User\r\n} from \"firebase/auth\";\r\nimport { SystemService } from \"./system.service\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { Location } from \"@angular/common\";\r\n\r\nconst LOGIN_ROUTE = \"/home/login\";\r\n\r\n/**\r\n * A service to manage authentication\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  public currentUser$: ReplaySubject<User | null> = new ReplaySubject<User | null>(1);\r\n  public isLoggedIn: ReplaySubject<boolean> = new ReplaySubject(1);\r\n\r\n  // the port used when emulating Firebase auth service (only in local environment)\r\n  private firebaseAuthEmulatorPort: number = 9099;\r\n\r\n  // the Firebase auth service interface\r\n  private auth!: Auth;\r\n\r\n  /**\r\n   * constructor\r\n   */\r\n  public constructor(\r\n    private systemService: SystemService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private location: Location\r\n  ) {\r\n\r\n    this.auth = getAuth();\r\n\r\n    const configuration = this.systemService.getEnvironmentConfiguration().then((configuration) => {\r\n      // in Local, we use Firebase emulator\r\n      if (configuration.stage == 'local') {\r\n        connectAuthEmulator(this.auth, `http://localhost:${this.firebaseAuthEmulatorPort}`, { disableWarnings: true });\r\n      }\r\n    });\r\n\r\n    // register to Firebase auth user-state updates\r\n    onAuthStateChanged(this.auth, async (user: User | null) => {\r\n      if (user) {\r\n        this.onSignIn(user)\r\n      }\r\n      else {\r\n        await this.onSignOut();\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Called when a user signs in\r\n   */\r\n  private onSignIn(user: User) {\r\n    this.currentUser$.next(user);\r\n    this.isLoggedIn.next(true);\r\n  }\r\n\r\n  private async onSignOut() {\r\n    this.isLoggedIn.next(false);\r\n    this.currentUser$.next(null);\r\n    this.navigateToLogin()\r\n  }\r\n\r\n  /**\r\n   * Sign in on Firebase for the given user/password\r\n   * @param email\r\n   * @param password\r\n   * @returns\r\n   */\r\n  public async login(email: string, password: string): Promise<User> {\r\n    let credentials = null;\r\n    try {\r\n      credentials = await signInWithEmailAndPassword(this.auth, email, password);\r\n    } catch (error) {\r\n      throw new Error(`Could not sign-in user with email: ${email}`);\r\n    }\r\n\r\n    let user = credentials?.user;\r\n    if (user == null) {\r\n      throw new Error(`Could not sign-in user with email: ${email}`);\r\n    }\r\n    return credentials.user;\r\n  }\r\n\r\n  /**\r\n   * Login with google\r\n   * @returns\r\n   */\r\n  async loginWithGoogleAsync() {\r\n    const provider = new GoogleAuthProvider();\r\n\r\n    const auth = getAuth();\r\n    let result = await signInWithPopup(auth, provider);\r\n\r\n    // This gives you a Google Access Token. You can use it to access the Google API.\r\n    const credential = GoogleAuthProvider.credentialFromResult(result);\r\n\r\n    if (credential == null) {\r\n      throw (\"Could not get credentials\")\r\n    }\r\n\r\n    return result.user;\r\n  }\r\n\r\n  /**\r\n   * Call on logout\r\n   */\r\n  async logout() {\r\n    const auth = getAuth();\r\n    await signOut(auth);\r\n  }\r\n\r\n  /**\r\n   * Navigate to login page\r\n   */\r\n  navigateToLogin() {\r\n    // Skip the action if already on the login page !\r\n    const pathWithoutQuery = this.router.url.split('?')[0];\r\n    if (pathWithoutQuery.endsWith('/login') || pathWithoutQuery.endsWith('/signup') || pathWithoutQuery.endsWith('/not-found') || pathWithoutQuery.endsWith('/invitation')) {\r\n      return\r\n    }\r\n\r\n    this.route.queryParams.subscribe(params => {\r\n\r\n      let redirectUrl = document.querySelector('base')?.getAttribute('href') || '/';\r\n      redirectUrl += this.location.path();\r\n\r\n      if (params['redirectUrl']) {\r\n        redirectUrl = params['redirectUrl'];\r\n      }\r\n      window.location.href = LOGIN_ROUTE + '?redirectUrl=' + redirectUrl;\r\n    });\r\n\r\n  }\r\n\r\n  public async signup(email: string, password: string): Promise<User> {\r\n    let credentials = null;\r\n    try {\r\n      credentials = await createUserWithEmailAndPassword(this.auth, email, password);\r\n    } catch (error: any) {\r\n      throw new Error(`Could not sign-up user with email: ${email}, ${error.message}`);\r\n    }\r\n\r\n    let user = credentials?.user;\r\n    if (user == null) {\r\n      throw new Error(`Could not sign-up user with email: ${email}`);\r\n    }\r\n    return credentials.user;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FirebaseApp } from 'firebase/app';\r\nimport { Firestore, connectFirestoreEmulator, initializeFirestore } from \"firebase/firestore\";\r\nimport { SystemService } from \"./system.service\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FirestoreService {\r\n\r\n  // the port used when emulating Firestore service (only in local environment)\r\n  private firestoreEmulatorPort: number = 8080;\r\n\r\n  // the Firestore instance used to access underlying collections/documents\r\n  public db!: Firestore;\r\n\r\n  public constructor(private systemService: SystemService) {\r\n  }\r\n\r\n  public async init(app: FirebaseApp) {\r\n    // Initialize Cloud Firestore and get a reference to the service\r\n\r\n    const configuration = await this.systemService.getEnvironmentConfiguration();\r\n\r\n    this.db = initializeFirestore(app, {\r\n      experimentalAutoDetectLongPolling: true\r\n    });\r\n\r\n\r\n    // in Local, we use Firestore emulator\r\n    if (configuration.stage === 'local') {\r\n      connectFirestoreEmulator(this.db, 'localhost', this.firestoreEmulatorPort);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class InstanceService {\r\n\r\n  /**\r\n   * Observable on the current instance name\r\n   */\r\n  protected _instanceId$: BehaviorSubject<string | null> = new BehaviorSubject<string | null>(null);\r\n\r\n  public set instanceId(company: string) {\r\n    this._instanceId$.next(company);\r\n  }\r\n\r\n  public get instanceId$(): Observable<string | null> {\r\n    return this._instanceId$.asObservable();\r\n  }\r\n\r\n  constructor() { }\r\n\r\n\r\n\r\n}\r\n","export enum ApplicationsEnum {\r\n    TimeIt = 'time-it',\r\n    Ticketing = 'ticketing'\r\n}","import { finalize, firstValueFrom, map, Observable, ReplaySubject } from 'rxjs';\r\nimport { Unsubscribe, User } from \"firebase/auth\";\r\nimport {\r\n  addDoc, and, CollectionReference, deleteDoc, doc, DocumentData,\r\n  DocumentReference, endAt, FieldPath, FirestoreDataConverter,\r\n  getDoc, getDocs, limit, onSnapshot, or, orderBy, OrderByDirection, query,\r\n  QueryConstraint, QueryDocumentSnapshot, QueryFieldFilterConstraint, setDoc, SnapshotOptions,\r\n  startAfter, updateDoc, where, WhereFilterOp\r\n} from 'firebase/firestore';\r\nimport { BaseEntity } from '../entities/_base-entity.class';\r\n\r\n/**\r\n * Class used to filter request on Firestore collections\r\n */\r\nexport class Filter {\r\n  fieldPath!: string | FieldPath;\r\n  opStr!: WhereFilterOp;\r\n  value: unknown;\r\n\r\n  constructor(fieldPath: string | FieldPath, opStr: WhereFilterOp, value: unknown) {\r\n    this.fieldPath = fieldPath;\r\n    this.opStr = opStr;\r\n    this.value = value;\r\n  }\r\n}\r\n\r\n/**\r\n * Class used to order the request' results\r\n */\r\nexport class Ordering {\r\n  field: string;\r\n  direction: string;\r\n\r\n  /**\r\n   * Constructor\r\n   */\r\n  constructor(field: string, direction: string = \"asc\") {\r\n    this.field = field;\r\n    this.direction = direction;\r\n  }\r\n}\r\n\r\n/**\r\n * Main interface to set the request's options\r\n */\r\nexport interface IListOptions<T> {\r\n  filtersAnd?: Filter[];\r\n  filtersOr?: Filter[];\r\n  orderBy?: Ordering[];\r\n  startAfter?: T | null;\r\n  endAt?: T | null;\r\n  limit: number;\r\n}\r\n\r\n/**\r\n * Interface returned by the request\r\n */\r\nexport interface IListResult<T> {\r\n  result: T[];\r\n  paginationToken: any;\r\n}\r\n\r\n/**\r\n * Default class to CRUD any T object that extends BaseEntity into/from Firestore Db\r\n */\r\nexport class FirestoreRepositoryBase<T extends BaseEntity> implements FirestoreDataConverter<T> {\r\n\r\n  // Firestore db path\r\n  private dbPath$: Observable<CollectionReference<T>>;\r\n\r\n  // User connected to Firestore\r\n  private owner: string = '';\r\n  private ownerId: string = '';\r\n\r\n  private defaultLimitInList: number = 50;\r\n\r\n  public constructor(protected entityConstructor: new () => T, dbPath: Observable<CollectionReference<DocumentData>>, $user: Observable<User | null>) {\r\n\r\n    this.dbPath$ = dbPath.pipe(map(item => item.withConverter(this)));;\r\n\r\n    // fill owner and ownerId from User information\r\n    $user.subscribe(user => {\r\n      if (user) {\r\n        this.owner = <string>user.email;\r\n        this.ownerId = user.uid;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Firestore generic data converter\r\n  */\r\n  public toFirestore(doc: T): any {\r\n    let ret: any = this.toAnonymousObject(doc);\r\n    ret.lastModificationDate = doc.lastModificationDate?.toISOString() ?? new Date().toISOString();\r\n    ret.creationDate = doc.creationDate?.toISOString();\r\n\r\n    delete ret.id;\r\n    delete ret.documentReference;\r\n\r\n    return ret;\r\n  }\r\n\r\n  public fromFirestore(snapshot: QueryDocumentSnapshot<DocumentData>, options: SnapshotOptions): T {\r\n    const data = snapshot.data(options) as T;\r\n\r\n    // create the T class from Firestore data\r\n    let object = Object.assign(new this.entityConstructor(), data);\r\n\r\n    // Convert every isostring Date to instance of date\r\n    const anonymousObj: any = {};\r\n    for (const key in object) {\r\n      if (object.hasOwnProperty(key) && object[key] && this.isValidDate(object[key])) {\r\n        anonymousObj[key] = new Date(object[key] as Date);\r\n      }\r\n    }\r\n    Object.assign(object, anonymousObj);\r\n\r\n    object.id = snapshot.id;\r\n    object.documentReference = snapshot.ref;\r\n\r\n    return object;\r\n  }\r\n\r\n  isValidDate(value: any) {\r\n\r\n    if (typeof value === 'boolean') {\r\n      return false;\r\n    }\r\n    if (typeof value === 'number') {\r\n      return false;\r\n    }\r\n\r\n\r\n    // ISO 8601 date format regular expression\r\n    const iso8601Regex = /^(\\d{4}-\\d{2}-\\d{2})(T\\d{2}:\\d{2}:\\d{2}(.\\d+)?(Z|[+-]\\d{2}:\\d{2})?)?$/;\r\n\r\n    // Test the format\r\n    if (!iso8601Regex.test(value)) {\r\n      return false;\r\n    }\r\n\r\n    let date = new Date(value as Date);\r\n\r\n    if (isNaN(date.getTime())) {\r\n      return false;\r\n    }\r\n\r\n    let ret = date && Object.prototype.toString.call(date) === \"[object Date]\";\r\n    return ret;\r\n  }\r\n\r\n  protected getCollectionReference(): Observable<CollectionReference<T>> {\r\n    return this.dbPath$;\r\n  }\r\n\r\n  protected getDocumentReference(id: string | null = null): Observable<DocumentReference<T>> {\r\n    return this.getCollectionReference().pipe(map(col => {\r\n      if (id) {\r\n        return doc(col, id);\r\n      } else {\r\n        return doc(col);\r\n      }\r\n    }))\r\n  }\r\n\r\n  public async getOneSnapshot(id: string): Promise<T | null> {\r\n    const docRef = await firstValueFrom(this.getDocumentReference(id));\r\n    return this.getOneSnapshotByDocumentReference(docRef);\r\n  }\r\n\r\n  public async getOneSnapshotByDocumentReference(reference: DocumentReference<T>) {\r\n    var docSnap = await getDoc(reference.withConverter(this));\r\n    if (docSnap.exists()) {\r\n      return docSnap.data();\r\n    } else {\r\n      // doc.data() will be undefined in this case\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public getOne(id: string): Observable<T | null> {\r\n    let subject = new ReplaySubject<T | null>(1);\r\n    let documentRef$ = this.getDocumentReference(id);\r\n    let unsubscribe: Unsubscribe;\r\n\r\n    let documentRefSubscription = documentRef$.subscribe({\r\n      next: (docRef) => {\r\n        unsubscribe = onSnapshot(docRef, (doc) => {\r\n          if (doc.exists()) {\r\n            subject.next(doc.data());\r\n          } else {\r\n            subject.next(null);\r\n          }\r\n        });\r\n      }\r\n    })\r\n\r\n    return subject.pipe(finalize(() => {\r\n      if (!subject.observed) {\r\n        unsubscribe();\r\n        documentRefSubscription.unsubscribe();\r\n      }\r\n    }));\r\n  }\r\n\r\n  public getOneByDocumentReference(docRef: DocumentReference<T>) {\r\n    let subject = new ReplaySubject<T | null>(1);\r\n\r\n    let unsubscribe: Unsubscribe = onSnapshot(docRef, (doc) => {\r\n      if (doc.exists()) {\r\n        subject.next(doc.data());\r\n      } else {\r\n        subject.next(null);\r\n      }\r\n    });\r\n\r\n    return subject.pipe(finalize(() => {\r\n      if (!subject.observed) {\r\n        unsubscribe();\r\n      }\r\n    }));\r\n  }\r\n\r\n  public getAll(orderBy: Ordering | null = null): Observable<T[]> {\r\n    let params = { limit: 0 } as any;\r\n    if (orderBy) {\r\n      params['orderBy'] = [orderBy];\r\n    }\r\n    return this.list(params).pipe(map(g => g.result));\r\n  }\r\n\r\n  public getAllSnapshot(orderBy: Ordering | null = null): Promise<T[]> {\r\n    let params = { limit: 0 } as any;\r\n    if (orderBy) {\r\n      params['orderBy'] = [orderBy];\r\n    }\r\n    return this.listSnapshot(params).then(g => g.result);\r\n  }\r\n\r\n  public list(options: IListOptions<T> | null = null): Observable<IListResult<T>> {\r\n    options ??= {\r\n      limit: this.defaultLimitInList,\r\n      filtersAnd: [],\r\n      startAfter: null,\r\n      endAt: null,\r\n      orderBy: []\r\n    }\r\n\r\n    //const whereOptions: QueryFieldFilterConstraint[] = options?.filters?.map(filter => { return where(filter.fieldPath, filter.opStr, filter.value) }) ?? [];; \r\n    const whereOptions = or(\r\n      ...options.filtersOr?.map(filter => { return where(filter.fieldPath, filter.opStr, filter.value) }) ?? [],\r\n      and(...options?.filtersAnd?.map(filter => { return where(filter.fieldPath, filter.opStr, filter.value) }) ?? [])\r\n      );\r\n\r\n    const orderByOptions = options?.orderBy?.map(order => { return orderBy(order.field, order.direction as OrderByDirection) }) ?? [];\r\n    const cursorOptions: any = [];\r\n    if (options.startAfter != null) {\r\n      cursorOptions.push(startAfter(options.startAfter));\r\n    } else if (options.endAt != null) {\r\n      cursorOptions.push(endAt(options.endAt));\r\n    }\r\n\r\n    // The subject that we will return\r\n    let subject = new ReplaySubject<IListResult<T>>();\r\n    let onSnapshotUnsubscribe: any;\r\n\r\n    let colletionRef$ = this.getCollectionReference();\r\n    let collectionSubscription = colletionRef$.subscribe({\r\n      next: (collection) => {\r\n        let queryConstraint = [];\r\n        queryConstraint.push(whereOptions);\r\n        queryConstraint.push(...orderByOptions);\r\n        queryConstraint.push(...cursorOptions);\r\n        if (options?.limit) {\r\n          queryConstraint.push(limit(options?.limit ?? this.defaultLimitInList));\r\n        }\r\n        const q = query(collection, ...queryConstraint);\r\n\r\n        onSnapshotUnsubscribe = onSnapshot(q, (querySnapshot) => {\r\n          const entities: T[] = [];\r\n\r\n          let lastSnapshot: QueryDocumentSnapshot | null = null;\r\n\r\n          querySnapshot.forEach((doc) => {\r\n            const data = doc.data()\r\n            entities.push(data);\r\n            lastSnapshot = doc;\r\n          });\r\n\r\n          // We set the snapshot for the last element to be used for \"startAfter\"\r\n          let paginationToken = lastSnapshot;\r\n\r\n          subject.next({ result: entities, paginationToken });\r\n        });\r\n      }\r\n    })\r\n\r\n    return subject.pipe(finalize(() => {\r\n      if (!subject.observed) {\r\n        onSnapshotUnsubscribe();\r\n        collectionSubscription.unsubscribe();\r\n      }\r\n    }));\r\n  }\r\n\r\n  /**\r\n * Fetches a snapshot of a Firestore collection based on the provided options.\r\n *\r\n * @param {IListOptions<T> | null} options - The options for the query.\r\n * @returns {Promise<IListResult<T>>} - A promise that resolves to the result of the query.\r\n */\r\n  public async listSnapshot(options: IListOptions<T> | null = null): Promise<IListResult<T>> {\r\n    // Set default options if none are provided.\r\n    options ??= {\r\n      limit: this.defaultLimitInList,\r\n      filtersAnd: [],\r\n      startAfter: null,\r\n      endAt: null,\r\n      orderBy: []\r\n    }\r\n\r\n    // Convert filters into Firestore 'where' constraints.\r\n    const whereOptions = options?.filtersAnd?.map(filter => {\r\n      return where(filter.fieldPath, filter.opStr, filter.value)\r\n    }) ?? [];\r\n\r\n    // Convert orderBy into Firestore 'orderBy' constraints.\r\n    const orderByOptions = options?.orderBy?.map(order => {\r\n      return orderBy(order.field, order.direction as OrderByDirection)\r\n    }) ?? [];\r\n\r\n    // Handle cursor options like 'startAfter' and 'endAt'.\r\n    const cursorOptions: any = [];\r\n    if (options.startAfter != null) {\r\n      cursorOptions.push(startAfter(options.startAfter));\r\n    } else if (options.endAt != null) {\r\n      cursorOptions.push(endAt(options.endAt));\r\n    }\r\n\r\n    // Fetch the Firestore collection reference.\r\n    const collectionRef = await firstValueFrom(this.getCollectionReference());\r\n\r\n    // Combine all the query constraints.\r\n    const queryConstraint: QueryConstraint[] = [];\r\n    queryConstraint.push(...whereOptions);\r\n    queryConstraint.push(...orderByOptions);\r\n    queryConstraint.push(...cursorOptions);\r\n    if (options?.limit) {\r\n      queryConstraint.push(limit(options?.limit ?? this.defaultLimitInList));\r\n    }\r\n\r\n    // Create the Firestore query.\r\n    const q = query(collectionRef, ...queryConstraint);\r\n\r\n    // Execute the query to get the snapshot.\r\n    const querySnapshot = await getDocs(q);\r\n    const entities: T[] = [];\r\n\r\n    let lastSnapshot: QueryDocumentSnapshot | null = null;\r\n\r\n    // Iterate through the snapshot to extract data.\r\n    querySnapshot.forEach((doc: any) => {\r\n      const data = doc.data()\r\n      entities.push(data);\r\n      lastSnapshot = doc;\r\n    });\r\n\r\n    // Set the snapshot for the last element, which can be used for \"startAfter\" in pagination.\r\n    let paginationToken = lastSnapshot;\r\n\r\n    // Return the result.\r\n    return { result: entities, paginationToken };\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  public async upsertAsync(item: T) {\r\n    const docRef = await firstValueFrom(this.getDocumentReference(item.id));\r\n\r\n\r\n    // Try to get the item if id not null\r\n    if (item.id) {\r\n      item.lastModificationDate = new Date;\r\n    }\r\n    else {\r\n      item.id = docRef.id;\r\n      item.owner = this.owner;\r\n      item.ownerId = this.ownerId;\r\n      item.creationDate = new Date();\r\n    }\r\n    await setDoc(docRef, item, { merge: true });\r\n    return item;\r\n  }\r\n\r\n  async addAsync(item: T) {\r\n    // Add a new document in the collection\r\n    item.owner = this.owner;\r\n    item.ownerId = this.ownerId;\r\n    item.creationDate = new Date();\r\n \r\n    if (item.id) {\r\n      const docRef = await firstValueFrom(this.getDocumentReference(item.id));\r\n      setDoc(docRef, item);\r\n    } else {\r\n      const collectionRef = await firstValueFrom(this.getCollectionReference());\r\n      item.id = (await addDoc(collectionRef, item)).id;\r\n    }\r\n    return item;\r\n  }\r\n\r\n  /**\r\n   * Partial update of a document\r\n   * @param id\r\n   * @param data\r\n   */\r\n  public async partialUpdate(id: string, data: any) {\r\n    data.lastModifiedDate = new Date().toISOString();\r\n    // We remove all undefined fields that are not supported by firebase\r\n    data = this.removeEmpty(data);\r\n\r\n    const docRef = await firstValueFrom(this.getDocumentReference(id));\r\n    await updateDoc(docRef, data);\r\n  }\r\n\r\n  public async deleteAsync(id: string) {\r\n    const docRef = await firstValueFrom(this.getDocumentReference(id));\r\n    await deleteDoc(docRef);\r\n  }\r\n\r\n  /**\r\n * Recursively removes properties with undefined values from an object or array.\r\n * @param obj - The input object or array to be cleaned.\r\n * @returns A new object or array without properties or elements with undefined values.\r\n */\r\n  private removeEmpty = (obj: any): any => {\r\n    // Check if the input is an array or an object\r\n    const isArray = Array.isArray(obj);\r\n    let newObj: any = isArray ? [] : {};\r\n\r\n    Object.keys(obj).forEach((key) => {\r\n      // If the value is an object or an array, recursively clean it\r\n      if (obj[key] === Object(obj[key])) {\r\n        newObj[key] = this.removeEmpty(obj[key]);\r\n      }\r\n      // If the value is not undefined, add it to the new object or array\r\n      else if (obj[key] !== undefined) {\r\n        newObj[key] = obj[key];\r\n      }\r\n    });\r\n\r\n    // If it's an array, filter out any undefined elements that might have been added during the recursion\r\n    if (isArray) {\r\n      newObj = newObj.filter((element: any) => element !== undefined);\r\n    }\r\n\r\n    return newObj;\r\n  };\r\n\r\n  /**\r\n   * Convert any object to compatible Anonymous object for Firestore compli\r\n   * @param obj Any object that needs to be converted\r\n   * @returns\r\n   */\r\n  protected toAnonymousObject(obj: any): any {\r\n\r\n    if (obj === null || typeof obj !== 'object') {\r\n      return obj;\r\n    }\r\n\r\n    // We must ignore these types as they create circular dependencies\r\n    if (obj instanceof DocumentReference || obj instanceof Observable) {\r\n      return null;\r\n    }\r\n\r\n    if (Array.isArray(obj)) {\r\n      return obj.map(item => this.toAnonymousObject(item));\r\n    }\r\n\r\n    if (obj instanceof Date) {\r\n      return obj.toISOString();\r\n    }\r\n\r\n    const anonymousObj: any = {};\r\n    for (const key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        anonymousObj[key] = this.toAnonymousObject(obj[key]);\r\n      }\r\n    }\r\n    return anonymousObj;\r\n  }\r\n}\r\n","import { Observable } from \"rxjs\";\r\nimport { DocumentData, DocumentReference } from \"firebase/firestore\";\r\nimport { BaseEntity } from \"../entities/_base-entity.class\";\r\n\r\n/**\r\n * This class is used to link a BaseEntity to its Observable and its Firestore DocumentReference\r\n */\r\nexport class FirestoreEntityWatcher<T extends BaseEntity> {\r\n  public observable: Observable<T | null> | null = null;\r\n  public documentRef: DocumentReference<DocumentData> | null = null;\r\n\r\n  constructor(observable: Observable<T | null> | null = null, documentRef: DocumentReference<DocumentData> | null) {\r\n    this.observable = observable;\r\n    this.documentRef = documentRef;\r\n  }\r\n\r\n}","import { CollectionReference, DocumentData } from 'firebase/firestore';\r\nimport { Observable, of } from 'rxjs';\r\nimport { User } from 'firebase/auth';\r\nimport { FirestoreRepositoryBase } from './firestore-repository-base.class';\r\nimport { AppUser } from '../entities/app-user.class';\r\n\r\n/**\r\n * The FirestoreCompanyRepository holds the Company collection.\r\n *\r\n * It redefines toFirestore() method to push the Company using company.id as the Firestore id\r\n */\r\nexport class FirestoreAppUserRepository extends FirestoreRepositoryBase<AppUser> {\r\n\r\n  public constructor(entityConstructor: new () => AppUser, dbPath: Observable<CollectionReference<DocumentData>>, $user: Observable<User | null>) {\r\n    super(entityConstructor, dbPath, $user);\r\n  }\r\n\r\n  /**\r\n   * Override toFirestore to manage FirestoreEntityWatcher for assignedActivities\r\n   * @param doc\r\n   * @returns\r\n   */\r\n  public override toFirestore(doc: AppUser) {\r\n    let ret: any = this.toAnonymousObject(doc);\r\n    delete ret.documentReference;\r\n\r\n    return ret;\r\n  }\r\n\r\n}\r\n","import { CollectionReference, DocumentData } from 'firebase/firestore';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from 'firebase/auth';\r\nimport { FirestoreRepositoryBase } from './firestore-repository-base.class';\r\nimport { Instance } from '../entities/instance.class';\r\n\r\n/**\r\n * The FirestoreCompanyRepository holds the Company collection.\r\n *\r\n * It redefines toFirestore() method to push the Company using company.id as the Firestore id\r\n */\r\nexport class FirestoreInstanceRepository<T> extends FirestoreRepositoryBase<Instance<T>> {\r\n\r\n  public constructor(entityConstructor: new () => Instance<T>, dbPath: Observable<CollectionReference<DocumentData>>, $user: Observable<User | null>) {\r\n    super(entityConstructor, dbPath, $user);\r\n  }\r\n\r\n  /**\r\n   * Override toFirestore to manage FirestoreEntityWatcher for assignedActivities\r\n   * @param doc\r\n   * @returns\r\n   */\r\n  public override toFirestore(doc: Instance<T>) {\r\n    let ret: any = this.toAnonymousObject(doc);\r\n\r\n    delete ret.documentReference;\r\n\r\n    return ret;\r\n  }\r\n\r\n}\r\n","import { DocumentData, DocumentReference } from \"firebase/firestore\";\r\n\r\n/**\r\n * Super-class of all Entities.\r\n * Also used in FirestoreRepositoryBase<T> to link BO entities with DB\r\n */\r\nexport class BaseEntity {\r\n  public id: string | null = null;\r\n  public creationDate?: Date = new Date();\r\n  public lastModificationDate?: Date = new Date();\r\n  public owner?: string = '';\r\n  public ownerId?: string = '';\r\n\r\n  // Firestore reference\r\n  public documentReference?: DocumentReference<any> | null = null;\r\n\r\n  // needed in Firestore to test for equality\r\n  public equals?(documentReferencePath: string): boolean {\r\n    return this.documentReference?.path === documentReferencePath;\r\n  }\r\n\r\n  /**\r\n   * Override to return a good stringified value\r\n   */\r\n  public toString(): string {\r\n    return this.id ?? \"Unknown\";\r\n  }\r\n\r\n}\r\n","import { BaseEntity } from \"./_base-entity.class\";\r\n\r\nexport class AppUser extends BaseEntity {\r\n\r\n  public displayName: string = '';\r\n  public email: string = '';\r\n  public subscriptions: AppUserSubscription[] = [];\r\n\r\n  constructor(uid: string | null = null, displayName: string | null = null, email: string | null = null) {\r\n    super();\r\n    this.displayName = displayName! ?? '';\r\n    this.email = email!;\r\n    this.id = uid; // set id to uid, to use the uid as entity id\r\n  }\r\n}\r\n\r\nexport class AppUserSubscription {\r\n  constructor(applicationName?: string | null, instanceName?: string | null, instanceId?: string | null) {\r\n    this.applicationName = applicationName;\r\n    this.instanceName = instanceName;\r\n    this.instanceId = instanceId;\r\n  }\r\n  applicationName?: string | null;\r\n  instanceName?: string | null;\r\n  instanceId?: string | null;\r\n}","import { BaseEntity } from \"./_base-entity.class\";\r\nimport { AppUser } from \"./app-user.class\";\r\n\r\n\r\n/**\r\n * A Company holds all its Users + its general information\r\n */\r\nexport class Instance<T> extends BaseEntity {\r\n    public name!: string;\r\n    public users?: T[] = [];\r\n    public creationProcess?: boolean;\r\n}\r\n\r\n","import { BaseEntity } from \"./_base-entity.class\";\r\n\r\nexport class Application extends BaseEntity {\r\n    name: string = '';    \r\n}","import { BaseEntity } from \"./_base-entity.class\";\r\n\r\n/**\r\n * An invitation holds all the needed information to invite a user !\r\n */\r\nexport class Invitation extends BaseEntity {\r\n  public email: string | null = null;\r\n  public displayName: string | null = null;\r\n}\r\n\r\n","import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport {MatCardModule} from '@angular/material/card';\r\n\r\n@Component({\r\n  selector: 'app-not-found-page',\r\n  standalone: true,\r\n  imports: [CommonModule, MatIconModule, MatButtonModule, MatCardModule],\r\n  templateUrl: './not-found-page.component.html',\r\n  styleUrl: './not-found-page.component.scss'\r\n})\r\nexport class NotFoundPageComponent {\r\n\r\n  constructor(private router: Router, private route: ActivatedRoute) {}\r\n}\r\n","<div class=\"center-container\">\r\n  <mat-card appearance=\"outlined\" class=\"card\">\r\n    <div class=\"card-content\">\r\n      <mat-icon>warning</mat-icon>\r\n      <h1>Not Found</h1>\r\n      <p>This page does not exist</p>\r\n    </div>\r\n  </mat-card>\r\n</div>","import { envBase } from \"./environment.base\";\r\n\r\n// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\n\r\nexport const environment = {\r\n  ...envBase\r\n};\r\n","import { Component, Input } from '@angular/core';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-version',\r\n  templateUrl: './version.component.html',\r\n  styleUrls: ['./version.component.scss'],\r\n  imports:[MatProgressSpinnerModule],\r\n  standalone: true\r\n})\r\nexport class VersionComponent {\r\n\r\n  @Input() title: string | null = null;\r\n  @Input() version: string | null = null;\r\n  @Input() commitHash: string | null = null;\r\n  @Input() packageGenerationDate: string | null = null;\r\n\r\n\r\n  constructor() {\r\n    this.version = environment.version;\r\n    this.commitHash = environment.commitHash;\r\n    this.packageGenerationDate = environment.packageGenerationDate;\r\n  }\r\n}\r\n","<div>\r\n  <h2 class=\"version-title\">{{title}}</h2>\r\n  @if (version) {\r\n    <div class=\"version-part-container\">\r\n      <div class=\"version-part\">\r\n        <span class=\"version-part-name\">version</span>\r\n        <span class=\"version-number\">{{ version }}</span>\r\n      </div>\r\n      <div class=\"version-part\">\r\n        <span class=\"version-part-name\">commitHash</span>\r\n        <span class=\"version-number\">{{ commitHash }}</span>\r\n      </div>\r\n      <div class=\"version-part\">\r\n        <span class=\"version-part-name\">packageGenerationDate</span>\r\n        <span class=\"version-number\">{{ packageGenerationDate }}</span>\r\n      </div>\r\n    </div>\r\n  } @else {\r\n    <div class=\"no-data-container\">\r\n      No data available\r\n    </div>\r\n  }\r\n</div>\r\n","/*\r\n * Public API Surface of common-lib\r\n */\r\n\r\nexport * from './lib/common-lib.service';\r\nexport * from './lib/common-lib.component';\r\nexport * from './lib/services/authentication.service';\r\nexport * from './lib/services/system.service';\r\nexport * from './lib/services/firestore.service';\r\nexport * from './lib/services/instance.service'\r\nexport * from './lib/enums/applications.enum';\r\nexport * from './lib/database/firestore-repository-base.class';\r\nexport * from './lib/database/firestore-entity-watcher.class';\r\nexport * from './lib/database/firestore-app-user-repository.class';\r\nexport * from './lib/database/firestore-instance-repository.class';\r\nexport * from './lib/entities/_base-entity.class';\r\nexport * from './lib/entities/app-user.class';\r\nexport * from './lib/entities/instance.class';\r\nexport * from './lib/entities/application.class';\r\nexport * from './lib/entities/invitation.class';\r\nexport * from './lib/components/not-found-page/not-found-page.component';\r\nexport * from './lib/components/version/version.component'\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.SystemService","i1","i2","i3"],"mappings":"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"}